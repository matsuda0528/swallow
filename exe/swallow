#! /usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path("../lib", __dir__)
require "swallow"
require "optparse"
require "pry"

module Swallow
  option={:format => 'auk', :solver => 'minisat', :debug => false}

  OptionParser.new do |opt|
    opt.banner = "Usage: swallow [options] <auk_file>"
    opt.on('-d', '--debug', '                   (default: false)'){|v| option[:debug] = v}
    opt.on('--format=[VALUE]', ['auk', 'html', 'csv'] ,'[auk | html | csv] (default: auk)'){|v| option[:format] = v}
    opt.on('--solver=[VALUE]', '<solver name>      (default: minisat)'){|v| option[:solver] = v}

    opt.parse!(ARGV)
  end

  # AUK Parser
  parser = AUKParser.new
  parser.parse File.read(ARGV[0]) if ARGV[0]
  ast = parser.ast

  # SAT Encoder
  ptable = PropTable.new(ast)
  formula = ast.to_cnf(ptable)

  # Solving
  solver = Ravensat::Solver.new(option[:solver])
  solver.solve formula, solver_log: option[:debug]

  ptable.select { |i| i.value.value }.each do |e|
    domain = Domain.new
    domain.add([e.room.name], :rooms)
    domain.add([e.instructor.name], :instructors)
    domain.add([e.period.name], :period)

    e.lecture.domain = domain
  end

  # AUK Generator
  case option[:format]
  when 'auk' then puts ast.to_auk
  when 'html' then puts ast.to_html
  when 'csv' then puts ast.to_csv
  end
end
